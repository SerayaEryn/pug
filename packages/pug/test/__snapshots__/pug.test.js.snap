exports[`pug .compileClient() should support module syntax in pug.compileClient(str, options) when inlineRuntimeFunctions it false 1`] = `
"var pug = require(\"pug-runtime\");
function template(locals) {
  var pug_html = \"\",
    pug_mixins = {},
    pug_interp;
  var pug_debug_filename, pug_debug_line;
  try {
    var self = locals || {};
    pug_debug_line = 1;
    pug_html = pug_html + \'\\u003Cdiv class=\"bar\"\\u003E\';
    pug_debug_line = 1;
    pug_html =
      pug_html +
      pug.escape(null == (pug_interp = self.foo) ? \"\" : pug_interp) +
      \"\\u003C\\u002Fdiv\\u003E\";
  } catch (err) {
    pug.rethrow(err, pug_debug_filename, pug_debug_line);
  }
  return pug_html;
}
module.exports = template;
"
`;

exports[`pug .compileClient() should support module syntax in pug.compileClient(str, options) when inlineRuntimeFunctions it true 1`] = `
"function pug_encode_char(e) {
  return pug_encode_html_rules[e] || e;
}
var pug_encode_html_rules = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;"
};
function pug_escape(e) {
  var r = "" + e,
    a = -1,
    t = r.indexOf('"'),
    n = r.indexOf("&"),
    c = r.indexOf("<"),
    u = r.indexOf(">");
  if (
    (t > -1 && (a = t),
    n > -1 && (n < a || -1 === a) && (a = n),
    c > -1 && (c < a || -1 === a) && (a = c),
    u > -1 && (u < a || -1 === a) && (a = u),
    -1 === a)
  )
    return e;
  if (a < r.length / 2) return r.replace(pug_match_html, pug_encode_char);
  var i,
    s,
    f,
    g = "";
  for (i = a, s = 0; i < r.length; i++) {
    switch (r.charCodeAt(i)) {
      case 34:
        f = "&quot;";
        break;
      case 38:
        f = "&amp;";
        break;
      case 60:
        f = "&lt;";
        break;
      case 62:
        f = "&gt;";
        break;
      default:
        continue;
    }
    s !== i && (g += r.substring(s, i)), (s = i + 1), (g += f);
  }
  return s !== i ? g + r.substring(s, i) : g;
}
var pug_match_html = /[&<>"]/g;
function pug_rethrow(n, e, r, t) {
  if (!(n instanceof Error)) throw n;
  if (!((\"undefined\" == typeof window && e) || t))
    throw ((n.message += \" on line \" + r), n);
  try {
    t = t || require(\"fs\").readFileSync(e, \"utf8\");
  } catch (e) {
    pug_rethrow(n, null, r);
  }
  var i = 3,
    a = t.split(\"\\n\"),
    o = Math.max(r - i, 0),
    h = Math.min(a.length, r + i),
    i = a
      .slice(o, h)
      .map(function(n, e) {
        var t = e + o + 1;
        return (t == r ? \"  > \" : \"    \") + t + \"| \" + n;
      })
      .join(\"\\n\");
  throw ((n.path = e),
  (n.message = (e || \"Pug\") + \":\" + r + \"\\n\" + i + \"\\n\\n\" + n.message),
  n);
}
function template(locals) {
  var pug_html = \"\",
    pug_mixins = {},
    pug_interp;
  var pug_debug_filename, pug_debug_line;
  try {
    var self = locals || {};
    pug_debug_line = 1;
    pug_html = pug_html + \'\\u003Cdiv class=\"bar\"\\u003E\';
    pug_debug_line = 1;
    pug_html =
      pug_html +
      pug_escape(null == (pug_interp = self.foo) ? \"\" : pug_interp) +
      \"\\u003C\\u002Fdiv\\u003E\";
  } catch (err) {
    pug_rethrow(err, pug_debug_filename, pug_debug_line);
  }
  return pug_html;
}
module.exports = template;
"
`;
